#!/usr/bin/env node

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

const path = require('path');

// ./server is our current working directory
process.chdir(path.dirname(__dirname));


const config = require('../lib/configuration');
const logger = require('../lib/logging').logger;

const USE_HTTPS = config.get('use_https');
if (!USE_HTTPS) {
  logger.warn('Not using HTTPS. I hope you know what you\'re doing!');
}

const
assets = require('../lib/assets'),
cachify = require('connect-cachify'),
clientSessions = require('client-sessions'),
express = require('express'),
fs = require('fs'),
i18n = require('i18n-abide'),
passport_google = require('../lib/passport_google'),
passport_windowslive = require('../lib/passport_windowslive'),
passport_yahoo = require('../lib/passport_yahoo'),
routes = require('../routes'),
session = require('../lib/session_context'),
statsd = require('../lib/statsd'),
util = require('util');

var app;

if (USE_HTTPS) {
  try {
    var privateKey = fs.readFileSync('config/privatekey.pem').toString();
    var certificate = fs.readFileSync('config/certificate.pem').toString();
    app = express.createServer({key: privateKey, cert: certificate});
  } catch (e) {
    logger.error('You must setup config/privatekey.pem and config/certificate.pem');
    logger.error('See docs/DEV_NOTES.md for details.');
    throw e;
  }
} else {
  app = express.createServer();
}

var cachifyRoot = path.join(__dirname, "..", "..", "static");
app.use(cachify.setup(
  assets.cachifyList,
  {
    prefix: config.get('cachify_prefix'),
    production: (config.get('env') === 'production' ? true : false),
    root: cachifyRoot
  }));

app.set('views', path.join(__dirname, '..', 'views'));
app.set('view engine', 'ejs');
app.use(express.bodyParser());
app.use(express.methodOverride());

app.use(express.logger({
  format: config.get('express_log_format'),
  stream: {
    write: function(x) {
      logger.info(typeof x === 'string' ? x.trim() : x);
    }
  }
}));

var sess_config = config.get('client_sessions');

// BigTent must be deployed behind SSL.
// Tell client-sessions everything will be alright
app.use(function(req, res, next) {
  req.connection.proxySecure = true;
  next();
});

app.use(clientSessions({
  cookieName: sess_config.cookie_name,
  secret:     sess_config.secret,
  duration:   sess_config.duration,
  cookie: {
    secure: true,
    httpOnly: true,
    maxAge: sess_config.duration
  }
}));

var account_link_config = config.get('account_link_sessions');

app.use(clientSessions({
  cookieName: account_link_config.cookie_name,
  secret:     account_link_config.secret,
  duration:   account_link_config.duration,
  cookie: {
    secure: true,
    httpOnly: true,
    maxAge: account_link_config.duration
  }
}));

app.use(express.csrf());
app.use(function(req, resp, next) {
  resp.local('csrf_token', req.session._csrf);
  next();
});

// limit all content bodies to 10kb, at which point we'll forcefully
// close down the connection.
app.use(express.limit("10kb"));

app.use(i18n.abide({
  supported_languages: config.get('supported_languages'),
  default_lang: config.get('default_lang'),
  debug_lang: config.get('debug_lang'),
  translation_directory: config.get('translation_directory'),
  disable_locale_check: config.get('disable_locale_check')
}));

passport_google.init(app);
passport_windowslive.init(app);
passport_yahoo.init(app);

routes.init(app);

passport_google.views(app);
passport_windowslive.views(app);
passport_yahoo.views(app);

app.use(function(req, res, next) {
  res.on('header', function() {
    // this allows fonts to be requested cross domain
    res.setHeader("Access-Control-Allow-Origin", config.get('public_url'));
    // this makes sure caches properly consider language headers
    res.setHeader('Vary', 'Accept-Encoding,Accept-Language');
  });
  next();
});

var static_root = path.join(__dirname, '..', '..', 'static');
app.use(express.static(static_root));

app.error(function(err, req, res, next) {
  logger.error(err.stack || err);
  res.render('error', {
        claimed: session.getClaimedEmail(req)
  });
});

if (config.get('disable_bigtent')) {
  logger.warn('DISABLED: This instance of BigTent is disabled. It will not proxy traffic.');
}

var lstnUrl;
var port;

if (config.get('use_https')) {
  // Development only... Ops runs this behind nginx
  port = 443;
  app.listen(443);
  app.on('error', function(e) {
    if ('EACCES' == e.code) {
      console.error('Permission Denied, maybe you should run this with sudo?');
    } else if ('EADDRINUSE' == e.code) {
      console.error('Unable to listen for connections, this service might already be running?');
    }
    throw e;
  });
  lstnUrl = util.format('https://%s', config.get('issuer'));
} else {
  port = process.env.PORT || 3030;
  app.listen(port, '0.0.0.0');
  lstnUrl = util.format('http://%s:%s', config.get('issuer'), port);
}
statsd.increment('server.started');
process.nextTick(function() {
  // 1) Line is used by test/lib/start_stop.js
  // 2) Dev/Ops feedback
  console.log('Everyone is welcome in the Persona ID Big Tent... Even you. Listening on ' + lstnUrl);
});
